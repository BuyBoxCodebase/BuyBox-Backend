generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

model Admin {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String    @unique
  password    String?
  profilePic  String?
  phoneNumber String?
  role        AdminRole @default(ADMIN)
  isVerified  Boolean   @default(false)
  googleId    String?
  facebookId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id                String                  @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  username          String?
  email             String                  @unique
  password          String?
  profilePic        String?
  phoneNumber       String?
  interests         String[]                @default([])
  isCompleted       Boolean                 @default(false)
  googleId          String?
  facebookId        String?
  cart              Cart?
  orders            Order[]
  coupons           CustomerCoupon[]
  orderPreferences  OrderPreference?
  notificationPrefs NotificationPreference?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seller {
  id                String                  @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  username          String?
  email             String                  @unique
  password          String?
  profilePic        String?
  phoneNumber       String?
  googleId          String?
  facebookId        String?
  isCompleted       Boolean                 @default(false)
  brand             Brand?
  notificationPrefs NotificationPreference?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeliveryAgent {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String  @unique
  password    String?
  profilePic  String?
  phoneNumber String?
  // [latitude , longitude]
  googleId    String?
  facebookId  String?
  isCompleted Boolean @default(false)
  isVerified  Boolean @default(false)
  isAssigned  Boolean @default(false)
  orders      Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  userId         String          @unique @db.ObjectId
  user           Seller          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String
  description    String
  brandPic       String?
  location       String
  products       Product[]
  advertisements Advertisement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  userId   String     @unique @db.ObjectId
  user     Customer   @relation(fields: [userId], references: [id], onDelete: Cascade)
  products CartItem[]

  updatedAt DateTime @updatedAt
}

model CartItem {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  productId  String          @db.ObjectId
  product    Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId  String?         @db.ObjectId
  variant    ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  cartId     String          @db.ObjectId
  cart       Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  quantity   Int
  totalPrice Float
}

model Category {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  imageUrl       String
  priority       Int             @default(0)
  products       Product[]
  subCategories  SubCategory[]
  advertisements Advertisement[]
}

model SubCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String
  priority   Int       @default(0)
  categoryId String    @db.ObjectId
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products   Product[]
}

model Product {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  brandId        String           @db.ObjectId
  brand          Brand            @relation(fields: [brandId], references: [id], onDelete: Cascade)
  name           String
  description    String
  images         String[]
  categoryId     String?          @db.ObjectId
  category       Category?        @relation(fields: [categoryId], references: [id])
  subCategoryId  String?          @db.ObjectId
  subCategory    SubCategory?     @relation(fields: [subCategoryId], references: [id])
  basePrice      Float
  attributes     Json?
  inventory      Inventory[]
  cartItems      CartItem[]
  orderItems     OrderProduct[]
  variants       ProductVariant[]
  options        ProductOption[]
  advertisements Advertisement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductOption {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  productId String               @db.ObjectId
  product   Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String
  values    ProductOptionValue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductOptionValue {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  optionId       String          @db.ObjectId
  option         ProductOption   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  value          String
  variantOptions VariantOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VariantOption {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  variantId     String             @db.ObjectId
  variant       ProductVariant     @relation(fields: [variantId], references: [id], onDelete: Cascade)
  optionValueId String             @db.ObjectId
  optionValue   ProductOptionValue @relation(fields: [optionValueId], references: [id], onDelete: Cascade)

  @@unique([variantId, optionValueId])
}

model ProductVariant {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  productId   String          @db.ObjectId
  product     Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  name        String?
  description String?
  price       Float
  isDefault   Boolean         @default(false)
  images      String[]
  options     VariantOption[]
  inventory   Inventory[]
  cartItems   CartItem[]
  orderItems  OrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inventory {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  productId   String?         @db.ObjectId
  product     Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId   String?         @db.ObjectId
  variant     ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  quantity    Int
  restockDate DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@unique([productId, variantId])
}

enum PaymentMode {
  CASH_ON_DELIVERY
  CREDIT_CARD
  DEBIT_CARD
  UPI
  NETBANKING
}

model Order {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  userId          String         @db.ObjectId
  user            Customer       @relation(fields: [userId], references: [id], onDelete: Cascade)
  email           String
  phoneNumber     String
  address         String
  products        OrderProduct[]
  status          OrderStatus    @default(PENDING)
  totalAmount     Float
  paymentMode     PaymentMode    @default(CASH_ON_DELIVERY)
  deliveryAgentId String?        @db.ObjectId
  deliveryAgent   DeliveryAgent? @relation(fields: [deliveryAgentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderProduct {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  productId  String          @db.ObjectId
  product    Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId  String?         @db.ObjectId
  variant    ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  quantity   Int
  totalPrice Float
  orderId    String          @db.ObjectId
  order      Order           @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELED
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Coupon {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  couponCode      String           @unique
  offerDetails    Json
  imageUrl        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  customerCoupons CustomerCoupon[]
}

model CustomerCoupon {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  couponId   String    @db.ObjectId
  coupon     Coupon    @relation(fields: [couponId], references: [id], onDelete: Cascade)
  userId     String    @db.ObjectId
  user       Customer  @relation(fields: [userId], references: [id], onDelete: Cascade)
  expired    Boolean   @default(false)
  expiryDate DateTime?
  used       Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model OrderPreference {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  userId         String      @unique @db.ObjectId
  user           Customer    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String
  email          String?
  phoneNumber    String?
  address        String
  city           String
  state          String
  postalCode     String
  country        String      @default("India")
  paymentMode    PaymentMode @default(CASH_ON_DELIVERY)
  cardNumber     String?
  cardType       String?
  cardHolderName String?
  isDefault      Boolean     @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationChannel {
  EMAIL
  SMS
  WHATSAPP
  PUSH
  IN_APP
}

model NotificationPreference {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  customerId           String?               @unique @db.ObjectId
  customer             Customer?             @relation(fields: [customerId], references: [id], onDelete: Cascade)
  sellerId             String?               @unique @db.ObjectId
  seller               Seller?               @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  primaryChannel       NotificationChannel   @default(EMAIL)
  secondaryChannel     NotificationChannel?
  orderUpdates         Boolean               @default(true)
  promotions           Boolean               @default(true)
  accountAlerts        Boolean               @default(true)
  deliveryUpdates      Boolean               @default(true)
  inventoryAlerts      Boolean               @default(true)
  whatsappNumber       String?
  smsNumber            String?
  emailFrequency       NotificationFrequency @default(IMMEDIATE)
  quietHoursEnabled    Boolean               @default(false)
  quietHoursStart      String?
  quietHoursEnd        String?
  weekendNotifications Boolean               @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationFrequency {
  IMMEDIATE
  DAILY_DIGEST
  WEEKLY_DIGEST
}

enum AdType {
  BANNER
  POPUP
  CAROUSEL
  SIDEBAR
  FEATURED_PRODUCT
  CATEGORY_HIGHLIGHT
  PROMOTIONAL
  CUSTOM
}

enum AdPlacement {
  HOME_PAGE
  PRODUCT_PAGE
  CATEGORY_PAGE
  CHECKOUT_PAGE
  SEARCH_RESULTS
  PROFILE_PAGE
  SIDEBAR
  FOOTER
  CUSTOM
}

enum AdStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  PAUSED
  ENDED
  ARCHIVED
}

enum AdTargetType {
  ALL_USERS
  SPECIFIC_USERS
  NEW_USERS
  RETURNING_USERS
  INTEREST_BASED
  LOCATION_BASED
  CUSTOM
}

model Advertisement {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String?
  type           AdType
  placement      AdPlacement
  content        Json // Flexible content structure based on ad type
  targetType     AdTargetType @default(ALL_USERS)
  targetConfig   Json? // Target configuration (interests, location, etc.)
  status         AdStatus     @default(DRAFT)
  startDate      DateTime
  endDate        DateTime?
  priority       Int          @default(1) // Higher number = higher priority
  maxImpressions Int? // Maximum number of times to show ad
  maxClicks      Int? // Maximum clicks before ad is paused
  budget         Float? // Budget for paid ads
  createdById    String       @db.ObjectId // Admin who created the ad

  // Associated items (optional relationships)
  productId  String?   @db.ObjectId
  product    Product?  @relation(fields: [productId], references: [id])
  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])
  brandId    String?   @db.ObjectId
  brand      Brand?    @relation(fields: [brandId], references: [id])

  // Media assets
  mediaUrls String[] // Images, videos, or other media URLs

  // Scheduling and conditions
  scheduleConfig    Json? // For complex scheduling (specific days, times)
  displayConditions Json? // Conditions for when to show the ad

  // Performance tracking
  impressions Int @default(0)
  clicks      Int @default(0)
  conversions Int @default(0)

  // A/B testing
  isAbTest    Boolean @default(false)
  abTestGroup String?

  // Relation to metrics
  metrics AdMetrics[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdMetrics {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  advertisementId String        @db.ObjectId
  advertisement   Advertisement @relation(fields: [advertisementId], references: [id], onDelete: Cascade)
  date            DateTime      @default(now())
  impressions     Int           @default(0)
  clicks          Int           @default(0)
  conversions     Int           @default(0)
  ctr             Float? // Click-through rate
  revenue         Float? // Revenue generated from this ad
  cost            Float? // Cost of running this ad
  roi             Float? // Return on investment

  // Demographics of users who interacted (aggregated)
  demographics Json?

  // Custom metrics
  customMetrics Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([advertisementId, date])
}
